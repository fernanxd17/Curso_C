|| DATOS NUMERICOS ||
    -int, float

|| DATOS ALFANUMERICOS ||
    - String, char

|| BOOLEANOS ||
    -Cualquier dato que es 0 es False, cualquier otro dato es True

|| OPERADORES ||

    -Clasificación según:
        -Operadores: Binarios: tienen dos o mas operandos (+, -, *, /)
                     Unarios: Solo tienen un unico operando  (++, +=,  --, -=, **, *=, etc.)
        -Función:  Aritméticos (+,-, *, /, ++, --)
                   Lógicos     (!, &&, ||, ^^)
                   Bit a Bit   (&, |, ^)

|| DIRECTIVAS DE PRE-COMPILADOR o PRE-PROCESADOR ||

    Son algunas caracteristicas o tips que le damos al compilador 
    para que entienda mejor nuestro programa, es como una especie de configuración
    del procesador.

    Las mas comunes son:
        - include, define, ifdef, ifndef

        Include: Inicia con #, indica que vamos a "incluir" el codigo de
            otro archivo en el actual.

|| STRUCT || 

    Un struct es un mecanismo para definir nuevos tipos de datos complejos o estructurados

    En un struct se puede guardar tipos de datos primitivos o incluso otros struct

    Si la estructura se pasa como argumento, osea su direccion de memoria &name_struct
    entonces ella en la funcion que la recibe debe recibirse como su contenido *name_struct
    para acceder a sus atributos se puede  usar:
        (*name_struct).attr, o , name_struct-->attr, que es igualment valido cuando se manejan structs
        
|| CONST ||

    Es un modificador de tipo de dato, indica que el contenido de la variable no podrá ser sobreescrito,
    pues es constante.

    Este tipo de aclaración tiene especial relevancia cuando se trabaja con punteros.

    Se trata de un mecanismo de seguridad, nos aseguramos de que nuestro programa no escribe donde no debe

    Este tipo de seguridad se le conoce tambien como "principio de menor privilegio", en donde
    no se le permite a modulos de software, tales como funciones, modificador
    aspectos mas alla para lo que fueron creados.

|| PUNTEROS ||
    Es una variable que en su contenido guarda la dirección de memoria de 
    otra variable. Por eso se dice que apunta o es puntera de una variable.

    Los punteros no pueden contener numeros cualquiera, solo pueden contener
    numeros que correspondan a direcciones de memoria.

    int * pointer; --> Crea un puntero
    *pointer --> con esto accedo al contenido de la direccion 
                    de memoria a donde apunta el puntero
    &number --> me da la direccion de memoria de una variable

|| PASAR VALORES POR ARGUMENTOS ||

    Por valor: C crea una COPIA de la variable, y no altera la original
    Por referencia: C hace uso de PUNTEROS, pasando como su nombre
        lo indica: una referencia a la posición de memoria de la variable
        que se maneja como argumento, permitiendo alterar su valor, 
        en esta forma el argumento se pasa junto a un *variable, 
        si pasamos &variable, estamos pasando es la direccion de memoria en byte
        hexadecimal, y si solo pasamos la variable estamos pasando una copia 

|| ARREGLOS ||

    Todo arreglo es un puntero, pero no todo puntero es un arreglo. 

|| CADENAS ||

    -strcmp: compara dos cadenas pasadas por argumentos
        Devuelve 0 si son iguales
                1 si la segunda es mayor que la primera
                -1 si la primera es mayor que la segunda

|| BIBLIOTECAS ||

    Se crea un archivo .h (mylib.h, p ej). y un archivo .c usa los metodos de él y les da cuerpo
    El archivo .h es como una interfaz y el .c es la que la implementa usando un #include

    luego si otra clase quiere usar el metodo del archivo .c entonces debe #include el archivo .h

    para compilar y enlazar todo se debe compilar el archivo que usa el metodo y la que lo implementa
    para mi caso es: mylib_usage.c y mylib.c, juntas, la linea de compilacion seria asi:
        gcc mylib_usage.c mylib.c -o mylib_usage, esto solo crea un archivo binario 